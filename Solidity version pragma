pragma solidity ^0.8.0;

contract SimpleSmartContract {
    uint public counter;
    event CounterIncremented(address indexed _caller, uint _newCounterValue);
    constructor() {
        counter = 0;
    }
    function incrementCounter() public {
        counter++;
        emit CounterIncremented(msg.sender, counter);
    }
     function getCounter() public view returns (uint) {
        return counter;
    }
}

contract SimpleContract2 {
    string public greeting;
    event GreetingUpdated(string newGreeting);
    address public owner;
    modifier onlyOwner() {
        require(msg.sender == owner, "You are not the owner");
        _;
    }
    constructor() {
        greeting = "Hello, World!";
        owner = msg.sender;
    }

    function updateGreeting(string memory _newGreeting) public onlyOwner {
        greeting = _newGreeting;
        emit GreetingUpdated(_newGreeting);
    }
    function getGreeting() public view returns (string memory) {
        // Return the current greeting
        return greeting;
    }
}
