pragma solidity ^0.8.0;

contract SimpleSmartContract {
    uint public counter;

    event CounterIncremented(address indexed _caller, uint _newCounterValue);

    constructor() {
        counter = 0;
    }

    function incrementCounter() public {
        counter++;

        emit CounterIncremented(msg.sender, counter);
    }

     function getCounter() public view returns (uint) {
        // Return the current value of the counter
        return counter;
    }
}

contract SimpleContract {
    string public greeting;

    event GreetingUpdated(string newGreeting);
    address public owner;

    modifier onlyOwner() {
        require(msg.sender == owner, "You are not the owner");
        _;
    }

    constructor() {
        // Initialize the greeting and set the contract owner
        greeting = "Hello, World!";
        owner = msg.sender;
    }

    // Function to update the greeting (only callable by the owner)
    function updateGreeting(string memory _newGreeting) public onlyOwner {
        // Update the greeting
        greeting = _newGreeting;

        // Emit an event to log the greeting update
        emit GreetingUpdated(_newGreeting);
    }

    // Function to get the current greeting
    function getGreeting() public view returns (string memory) {
        // Return the current greeting
        return greeting;
    }
}
